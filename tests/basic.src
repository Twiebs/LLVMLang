IMPORT "clib.bang"

Vector3 :: STRUCT
	x : S32
	y : S32
	z : S32

Transform3D :: STRUCT
	position : Vector3
	rotation : Vector3
	scale 	 : Vector3

CastTest :: ()
	printf("Running Cast Test!\n")

	foo : F32 = F32(5)
	printf("foo is %f\n" foo)

	bar : S32 = 8
	foo = F32(bar)
	printf("bar is : %i\n" bar)
	printf("foo is: %f\n" foo)

	someInt := 0
	someInt = S32(6.7)
	printf("someInt is: %d\n" someInt)
	printf("\n")

BooleanTest :: ()
	printf("Running boolean test!\n")
	foo : F32 = 0.5
	IF foo > 1.0 printf("Foo is greater than 1\n")
	IF foo < 1.0 printf("Foo is less than 1.0\n")
	printf("\n")


InternalStructTestB :: () >> S32
	InternalType :: STRUCT
		internalData : S32

	data : InternalType
	data.internalData = 7
	RETURN data.internalData


InternalStructTestA :: () >> S32
	FirstInternalType :: STRUCT
		fistData : S32

	InternalType :: STRUCT
		internalData : S32
		someOtherData : S32
		myFirstInternalType : FirstInternalType

	data : InternalType
	data.internalData = 5
	RETURN data.internalData


LambdaTest :: ()
	lambdaA :: () >> S32
		x : S32 = 5
		y : S32 = 3
		z : S32 = x * y
		RETURN z

	lambdaB :: (a : F32 b : F32) >> F32
		temp : F32 = a * b
		RETURN temp

	lambdaC :: () >> F32
		c := lambdaA()
		d := lambdaB(5.0 27.0)
		RETURN (F32(c) * d)

	resultA := lambdaA()
	resultB := lambdaB(2.0 3.0)
	resultC := lambdaC()
	printf("resultA is %d\n" resultA)
	printf("resultB is %f\n" F64(resultB))
	printf("resultC is %f\n" F64(resultC))

	Clamp :: (value : F32 min : F32 max : F32) >> F32
    	IF value < min value = min
    	IF value > max value = max
    	RETURN value


LambdaInternalTypeTest :: () >> S32
	DoThings :: () >> S32
		InternalType :: STRUCT
			internalData : S32

		data : InternalType
		data.internalData = 7
		RETURN data.internalData

	DoInterestingThings :: () >> S32
		InterestingThing :: STRUCT
			interestingData  : S32
			interestingCount : S32

		BoringThing :: STRUCT
			boringData  : S32
			boringCount : S32

		Stuff :: STRUCT
			interestingThing : InterestingThing
			boringThing : BoringThing

		stuff : Stuff
		stuff.interestingThing.interestingData = 7
		RETURN stuff.interestingThing.interestingData

	DoThings()
	DoInterestingThings()
	RETURN 0

Main :: () >> S32
	CastTest()
	BooleanTest()

	RunInternalStructTests :: () >> S32
		printf("Running Internal struct tests\n")
		a := InternalStructTestA()
		b := InternalStructTestB()
		printf("InternalStructTestA returned %d\n" a)
		printf("InternalStructTestB returned %d\n" b)
		RETURN 0

	RunInternalStructTests()
	printf("Running LambdaTest...")
	LambdaTest()

	RETURN 0


